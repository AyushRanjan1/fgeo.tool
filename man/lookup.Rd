% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lookup.R
\name{lookup}
\alias{lookup}
\title{\code{recode()} by looking up \code{old} and \code{new} values (from a lookup table).}
\usage{
lookup(old, new)
}
\arguments{
\item{old, new}{Vectors of equal length giving old and new codes.}
}
\value{
A "spliced" list with names from \code{old} and values from \code{new}. The
kind of data structure that you can feed to \code{...} in dplyr::recode()`.
}
\description{
Use this function inside \code{dplyr::recode()} to recode a vector based on values
from two other vectors, where \code{old} and \code{new} codes are looked up. These
lookup vectors are commonly stored in a dataframe and come from a .csv or
spreadsheet file.
}
\examples{
set.seed(1)
library(dplyr, warn.conflicts = FALSE)
library(rlang)

look <- tibble(
  old = c("spp1", "unknown"),
  new = c("spp3", "spp4")
)

lookup(look$old, look$new)

x <- c("spp1", "spp2", "spp3", "unknown", "spp3", "unknown", "spp1", "spp1")
x
recode(x, lookup(look$old, look$new))
# Same
recode(x, !!!as.list(set_names(look$new, look$old)))

dfm <- tibble(x = x)
mutate(dfm, new_x = recode(x, lookup(look$old, look$new)))
}
\seealso{
\code{dplyr::recode()}
}
